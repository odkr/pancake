#!/bin/sh
# release-publish - Publish a release on GitHub.
# See -h for details.
# Copyright 2021 Odin Kroeger
# Released under the MIT license.
# shellcheck disable=2015

set -Ceu


# CONSTANTS
# =========

# The top-level directory of the git repository.
REPO="$(git rev-parse --show-toplevel)" && [ "$REPO" ] || {
	SCPT_NAME="$(basename "$0")" && [ "$SCPT_NAME" ] || SCPT_NAME="$0"
	printf '%s: failed to find repository.\n' "$SCPT_NAME" >&2
	exit 69
}
readonly REPO


# LIBRARY
# =======

LIBRARY="$REPO/scripts/library.sh"
# shellcheck source=library.sh
. "$LIBRARY" || exit


# WORKING DIRECTORY
# =================

cd -P "$REPO" || exit 69


# ARGUMENTS
# =========

filter=
OPTIND=1 OPTARG='' opt=
while getopts m:f:h opt
do
	case $opt in
		(f)	filter="$OPTARG" ;;
		(h)	exec cat <<-EOF
			$SCPT_NAME - publish a release on GitHub

			Synopsis:
			    $SCPT_NAME [-d DIR] [-f FILTER] [-m manifest]
			    $SCPT_NAME -h

			Options:
			    -f FILTER    The Lua filter.
			    -h           Show this help screen.
			EOF
			;;
		(*)	exit 70
	esac
done
shift $((OPTIND - 1))
[ $# -gt 0 ] && panic -s 64 'too many operands.'

[ -z "$filter" ] || [ -f "$filter" ] ||
	panic -s 66 '%s: no such file.' "$filter"

[ "${filter-}" ] || filter="$(guess_filter)" && [ "$filter" ] || exit


# PRELUDE
# =======

temp_dir_make -p rr
CLEANUP="git checkout develop; ${CLEANUP-}"


# MAIN
# ====

warn -e "$SMSO" 'verifying branch ...'

branch="$(git branch --show-current)" && [ "$branch" ] ||
	panic 'failed to determine current branch'

case $branch in
	(main|release-*) : ;;
	(*) panic -s 64 'not on the main or a release branch.'
esac

warn -e "$SMSO" 'verifying version number ...'

if [ "$branch" = main ]
then
	tag="$(
		git tag --list 'v*' --sort version:refname |
		tail -n1                                   |
		sed 's/^v//'
	)" && [ "$tag" ] ||
		panic 'failed to determine current release.'
else
	tag="${branch#release-}"
fi		

release="$(sed -n 's/-- *@release *//p;' "$filter")" && [ "$release" ] ||
	panic '%s: failed to parse @release.' "$filter"

vers="$(sed -n "s/^ *VERSION *= *['\"]\([^'\"]*\)['\"].*/\1/p;" "$filter")" &&
	[ "$vers" ] || panic '%s: failed to parse VERSION.' "$filter"

[ "$tag" = "$release" ] ||
	panic -s 65 '%s: @release %s does not match tag/branch.' \
	       "$filter" "$release"

[ "$tag" = "$vers" ] ||
	panic -s 65 '%s: VERSION %s does not match tag/branch.' \
	      "$filter" "$vers"

name="$(basename "$REPO")" && [ "$name" ] ||
	panic '%s: failed to determine basename.' "$REPO"

rockspec_template="m4/$name.rockspec.m4"
if [ -e "$rockspec_template" ]
then
	(
		cd -P "$TEMP_DIR" || exit
		rockspec="$name-$vers-0.rockspec"
		m4 -D NAME="$name" -D VERSION="$vers" \
		   "$REPO/m4/macros.m4" "$REPO/$rockspec_template" >"$rockspec"
		warn -e "$SMSO" 'packing rock ...'
		luarocks pack "$rockspec" || exit
		rock="${rockspec%.rockspec}.src.rock"
		[ -e "$rock" ] || panic '%s: no such file.' "$rock"
		warn -e "$SMSO" 'verifying rock ...'
		unzip -q "$rock" -d rock
		diff -qr -X "$REPO/.gitignore" -x '.*' -x test \
		     "rock/$name" "$REPO" ||
			panic 'rock differs from local repository.'
		warn -e "$SMSO" 'uploading rock ...'
		luarocks upload --sign "$rockspec" "$rock"
	)
fi

warn -e "$GREEN" done.
